// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: api/proto/paymentpb/payment.proto

package paymentpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FraudService_FraudCheck_FullMethodName = "/order.FraudService/FraudCheck"
)

// FraudServiceClient is the client API for FraudService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FraudServiceClient interface {
	FraudCheck(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (*FraudResponse, error)
}

type fraudServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFraudServiceClient(cc grpc.ClientConnInterface) FraudServiceClient {
	return &fraudServiceClient{cc}
}

func (c *fraudServiceClient) FraudCheck(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (*FraudResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FraudResponse)
	err := c.cc.Invoke(ctx, FraudService_FraudCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FraudServiceServer is the server API for FraudService service.
// All implementations must embed UnimplementedFraudServiceServer
// for forward compatibility.
type FraudServiceServer interface {
	FraudCheck(context.Context, *PaymentRequest) (*FraudResponse, error)
	mustEmbedUnimplementedFraudServiceServer()
}

// UnimplementedFraudServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFraudServiceServer struct{}

func (UnimplementedFraudServiceServer) FraudCheck(context.Context, *PaymentRequest) (*FraudResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FraudCheck not implemented")
}
func (UnimplementedFraudServiceServer) mustEmbedUnimplementedFraudServiceServer() {}
func (UnimplementedFraudServiceServer) testEmbeddedByValue()                      {}

// UnsafeFraudServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FraudServiceServer will
// result in compilation errors.
type UnsafeFraudServiceServer interface {
	mustEmbedUnimplementedFraudServiceServer()
}

func RegisterFraudServiceServer(s grpc.ServiceRegistrar, srv FraudServiceServer) {
	// If the following call pancis, it indicates UnimplementedFraudServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FraudService_ServiceDesc, srv)
}

func _FraudService_FraudCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FraudServiceServer).FraudCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FraudService_FraudCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FraudServiceServer).FraudCheck(ctx, req.(*PaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FraudService_ServiceDesc is the grpc.ServiceDesc for FraudService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FraudService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.FraudService",
	HandlerType: (*FraudServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FraudCheck",
			Handler:    _FraudService_FraudCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/paymentpb/payment.proto",
}

const (
	ValidationService_ValidatePayment_FullMethodName = "/order.ValidationService/ValidatePayment"
)

// ValidationServiceClient is the client API for ValidationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ValidationServiceClient interface {
	ValidatePayment(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (*ValidationResponse, error)
}

type validationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewValidationServiceClient(cc grpc.ClientConnInterface) ValidationServiceClient {
	return &validationServiceClient{cc}
}

func (c *validationServiceClient) ValidatePayment(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (*ValidationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidationResponse)
	err := c.cc.Invoke(ctx, ValidationService_ValidatePayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ValidationServiceServer is the server API for ValidationService service.
// All implementations must embed UnimplementedValidationServiceServer
// for forward compatibility.
type ValidationServiceServer interface {
	ValidatePayment(context.Context, *PaymentRequest) (*ValidationResponse, error)
	mustEmbedUnimplementedValidationServiceServer()
}

// UnimplementedValidationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedValidationServiceServer struct{}

func (UnimplementedValidationServiceServer) ValidatePayment(context.Context, *PaymentRequest) (*ValidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatePayment not implemented")
}
func (UnimplementedValidationServiceServer) mustEmbedUnimplementedValidationServiceServer() {}
func (UnimplementedValidationServiceServer) testEmbeddedByValue()                           {}

// UnsafeValidationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ValidationServiceServer will
// result in compilation errors.
type UnsafeValidationServiceServer interface {
	mustEmbedUnimplementedValidationServiceServer()
}

func RegisterValidationServiceServer(s grpc.ServiceRegistrar, srv ValidationServiceServer) {
	// If the following call pancis, it indicates UnimplementedValidationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ValidationService_ServiceDesc, srv)
}

func _ValidationService_ValidatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidationServiceServer).ValidatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidationService_ValidatePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidationServiceServer).ValidatePayment(ctx, req.(*PaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ValidationService_ServiceDesc is the grpc.ServiceDesc for ValidationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ValidationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.ValidationService",
	HandlerType: (*ValidationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidatePayment",
			Handler:    _ValidationService_ValidatePayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/paymentpb/payment.proto",
}
